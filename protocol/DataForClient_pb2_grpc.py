# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import DataForClient_pb2 as DataForClient__pb2


class DFCStub(object):
  """这是数据服务器Server为客户Client提供的服务DFC的协议

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.uploadChunk = channel.unary_unary(
        '/DFC/uploadChunk',
        request_serializer=DataForClient__pb2.uploadChunkRequest.SerializeToString,
        response_deserializer=DataForClient__pb2.uploadChunkResponse.FromString,
        )


class DFCServicer(object):
  """这是数据服务器Server为客户Client提供的服务DFC的协议

  """

  def uploadChunk(self, request, context):
    """服务：用户上传chunk到Data Server
    请求：chunk快
    返回：无
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DFCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'uploadChunk': grpc.unary_unary_rpc_method_handler(
          servicer.uploadChunk,
          request_deserializer=DataForClient__pb2.uploadChunkRequest.FromString,
          response_serializer=DataForClient__pb2.uploadChunkResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DFC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
