# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: DataForMaster.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='DataForMaster.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x13\x44\x61taForMaster.proto\"K\n\tcopyChunk\x12\x0b\n\x03\x43ID\x18\x01 \x01(\x05\x12\x0e\n\x06\x63opyip\x18\x02 \x01(\t\x12\x10\n\x08\x63opyport\x18\x03 \x01(\x05\x12\x0f\n\x07\x63opycid\x18\x04 \x01(\x05\"\x16\n\x07\x63hunkID\x12\x0b\n\x03\x43ID\x18\x01 \x01(\x05\"\x18\n\x04\x41\x43K1\x12\x10\n\x08\x66\x65\x65\x64\x62\x61\x63k\x18\x01 \x01(\x08\x32\x66\n\x03\x44\x46M\x12,\n\x17\x64\x65leteChunkOnDataServer\x12\x08.chunkID\x1a\x05.ACK1\"\x00\x12\x31\n\x1a\x63opyChunkBetweenDataServer\x12\n.copyChunk\x1a\x05.ACK1\"\x00\x62\x06proto3')
)




_COPYCHUNK = _descriptor.Descriptor(
  name='copyChunk',
  full_name='copyChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='CID', full_name='copyChunk.CID', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='copyip', full_name='copyChunk.copyip', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='copyport', full_name='copyChunk.copyport', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='copycid', full_name='copyChunk.copycid', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=23,
  serialized_end=98,
)


_CHUNKID = _descriptor.Descriptor(
  name='chunkID',
  full_name='chunkID',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='CID', full_name='chunkID.CID', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=100,
  serialized_end=122,
)


_ACK1 = _descriptor.Descriptor(
  name='ACK1',
  full_name='ACK1',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='feedback', full_name='ACK1.feedback', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=124,
  serialized_end=148,
)

DESCRIPTOR.message_types_by_name['copyChunk'] = _COPYCHUNK
DESCRIPTOR.message_types_by_name['chunkID'] = _CHUNKID
DESCRIPTOR.message_types_by_name['ACK1'] = _ACK1
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

copyChunk = _reflection.GeneratedProtocolMessageType('copyChunk', (_message.Message,), {
  'DESCRIPTOR' : _COPYCHUNK,
  '__module__' : 'DataForMaster_pb2'
  # @@protoc_insertion_point(class_scope:copyChunk)
  })
_sym_db.RegisterMessage(copyChunk)

chunkID = _reflection.GeneratedProtocolMessageType('chunkID', (_message.Message,), {
  'DESCRIPTOR' : _CHUNKID,
  '__module__' : 'DataForMaster_pb2'
  # @@protoc_insertion_point(class_scope:chunkID)
  })
_sym_db.RegisterMessage(chunkID)

ACK1 = _reflection.GeneratedProtocolMessageType('ACK1', (_message.Message,), {
  'DESCRIPTOR' : _ACK1,
  '__module__' : 'DataForMaster_pb2'
  # @@protoc_insertion_point(class_scope:ACK1)
  })
_sym_db.RegisterMessage(ACK1)



_DFM = _descriptor.ServiceDescriptor(
  name='DFM',
  full_name='DFM',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=150,
  serialized_end=252,
  methods=[
  _descriptor.MethodDescriptor(
    name='deleteChunkOnDataServer',
    full_name='DFM.deleteChunkOnDataServer',
    index=0,
    containing_service=None,
    input_type=_CHUNKID,
    output_type=_ACK1,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='copyChunkBetweenDataServer',
    full_name='DFM.copyChunkBetweenDataServer',
    index=1,
    containing_service=None,
    input_type=_COPYCHUNK,
    output_type=_ACK1,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_DFM)

DESCRIPTOR.services_by_name['DFM'] = _DFM

# @@protoc_insertion_point(module_scope)
