# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protocol import MasterForClient_pb2 as MasterForClient__pb2


class MFCStub(object):
  """这是控制服务器Master为客户Client提供的服务MFC的协议

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getFiletree = channel.unary_stream(
        '/MFC/getFiletree',
        request_serializer=MasterForClient__pb2.EmptyArg.SerializeToString,
        response_deserializer=MasterForClient__pb2.Str.FromString,
        )


class MFCServicer(object):
  """这是控制服务器Master为客户Client提供的服务MFC的协议

  """

  def getFiletree(self, request, context):
    """服务：为客户提供文件目录树结构
    请求：无内容请求
    返回：存储文件路径的字符串流
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MFCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getFiletree': grpc.unary_stream_rpc_method_handler(
          servicer.getFiletree,
          request_deserializer=MasterForClient__pb2.EmptyArg.FromString,
          response_serializer=MasterForClient__pb2.Str.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MFC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
