# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import DataForMaster_pb2 as DataForMaster__pb2


class DFMStub(object):
  """这是数据服务器Server为控制服务器Master提供的服务DFM的协议

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.deleteChunkOnDataServer = channel.unary_unary(
        '/DFM/deleteChunkOnDataServer',
        request_serializer=DataForMaster__pb2.chunkID.SerializeToString,
        response_deserializer=DataForMaster__pb2.ACK.FromString,
        )


class DFMServicer(object):
  """这是数据服务器Server为控制服务器Master提供的服务DFM的协议

  """

  def deleteChunkOnDataServer(self, request, context):
    """事物：chunk删除
    服务：master删除数据服务器上的chunk
    请求：chunkID
    返回：状态码
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DFMServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'deleteChunkOnDataServer': grpc.unary_unary_rpc_method_handler(
          servicer.deleteChunkOnDataServer,
          request_deserializer=DataForMaster__pb2.chunkID.FromString,
          response_serializer=DataForMaster__pb2.ACK.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DFM', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
